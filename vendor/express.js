// Generated by CoffeeScript 1.7.1
var STATIC_DIR, app, cachelicious, cacheliciousConnect, express, favicon, http, path, serveStatic, server, session, staticHandler;

path = require('path');

http = require('http');

express = require('express');

session = require('express-session');

favicon = require('static-favicon');

STATIC_DIR = process.env['STATIC_DIR'] || '.';

if (process.env['USE_CACHELICIOUS']) {
  cachelicious = require('cachelicious');
  cacheliciousConnect = cachelicious.connect;
  staticHandler = cacheliciousConnect(STATIC_DIR, {
    maxCacheSize: process.env['CACHE_SIZE'] || 50 * 1024 * 1024
  });
} else {
  serveStatic = require('serve-static');
  staticHandler = serveStatic(STATIC_DIR);
}

app = express();

app.set('env', config.env);

app.set('port', process.env['PORT']);

app.enable('trust proxy');

app.use(favicon('favicon.ico'));

app.use('/error', function(req, res, next) {
  var err;
  err = new Error('File Not Found');
  err.status = 404;
  next(err);
});

app.all(/.*\/[^\.\/]*$/, function(req, res, next) {
  var query, urlPath, _ref, _ref1;
  _ref = req.url.split('?'), urlPath = _ref[0], query = _ref[1];
  _ref1 = req.url.split('?'), urlPath = _ref1[0], query = _ref1[1];
  req.url = "" + (path.join(urlPath, process.env['INDEX_FILE'] || 'index.html')) + (query ? "?" + query : "");
  next();
});

app.use(function(req, res, next) {
  if (req.url[1] === '_' || /^\/(.*\/_.*|node_modules\/.*|package.json|server.js|Procfile|vendor\/.*)$/.test(req.url)) {
    return next();
  }
  req.url = req.url.replace(/^(.+)\.(\d+)\.(js|css|png|jpg|gif|jpeg)$/, '$1.$3');
  res.removeHeader('X-Powered-By');
  res.removeHeader('Last-Modified');
  return staticHandler.apply(this, arguments);
});

app.use(function(req, res, next) {
  var err;
  err = new Error('File Not Found');
  err.status = 404;
  next(err);
});

app.use(function(err, req, res, next) {
  console.error("" + req.url + ": ", err.stack);
  next(err);
});

app.use(function(err, req, res, next) {
  res.status(err.status || 500);
  if (req.xhr) {
    res.send({
      error: err.status === 404 ? '404 Not Found' : 'Something blew up!'
    });
  } else {
    req.url = "/error/" + (err.status || 500) + ".html";
    return staticHandler.apply(this, [req, res, next]);
  }
});

app.use(function(err, req, res, next) {
  res.send('Something blew up!');
});

server = http.createServer(app).listen(app.get('port'), function() {
  var address;
  address = server.address();
  console.log("Listening on port " + address.port + "...");
});
