#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

set -e            # fail fast
set -o pipefail   # don't ignore exit codes when piping output
# set -x          # enable debugging

# Configure directories
build_dir=$1
cache_dir=$2
env_dir=$3

bp_dir=$(cd $(dirname $0); cd ..; pwd)

# clean up leaking environment
unset GIT_DIR

# Load some convenience functions like status(), echo(), and indent()
source $bp_dir/bin/common.sh

source "$build_dir/_static.cfg"

if [ ! -e $build_dir/Procfile ]; then
  Generate_Procfile=true
fi

bp_dir=`cd $(dirname $0); cd ..; pwd`

mkdir -p $cache_dir/static


if [[ ! -f $build_dir/error/404.html ]]; then
  if [[ -f $build_dir/404.htm ]]; then
    status "Movinging /404.htm to /error/404.html... "
    mv "$build_dir/404.htm" "$build_dir/error/404.html"
  elif [[ -f $build_dir/404.html ]]; then
    status "Movinging /404.htm to /error/404.html... "
    mv "$build_dir/404.html" "$build_dir/error/404.html"
  elif [[ -f $build_dir/error/404.htm ]]; then
    status "Renaming 404.htm to 404.html... "
    mv "$build_dir/error/404.htm" "$build_dir/error/404.html"
  else
    status "Vendoring default 404.html into slug... "
    mv "$bp_dir/vendor/404.html" "$build_dir/404.html"
  fi
fi

# Sets default server type
if [[ ! $server_type ]]; then
  server_type="node"
fi

if [[ $server_type == "node" || $server_type == "node.js" || $server_type == "express" || $server_type == "express.js" ]]; then

  if [ -f $build_dir/package.json ]; then
    status "Using existing package.json"
    if [[ $server_type == "node" || $server_type == "node.js" ]]; then
      status "Augmenting package.json with $server_type server dependencies"
      # Do this because we want to cache it with other node_modules. Otherwise it will be pruned.
      # It doesn't matter if grunt and/or grunt-cli is already there
      awk '{ if ( $0 ~ /"dependencies".*/ ) {
                  printf "%s\n    %s\n    %s\n    %s\n    %s\n", $0, "\"resolve-path\": \"1.x.x\",", "\"mime-types\": \"0.x.x\",", "\"finished\": \"1.x.x\",", "\"cachelicious\": \"cblage/node-cachelicious\",";
             } else {
                  print $0;
             }
           }' $build_dir/package.json > $build_dir/tmp-package.json;
      cp $build_dir/tmp-package.json $build_dir/package.json
      rm $build_dir/tmp-package.json
      cat $build_dir/package.json
    elif [[ $server_type == "express" || $server_type == "express.js" ]]; then
      status "Augmenting package.json with $server_type server dependencies"
      # Do this because we want to cache it with other node_modules. Otherwise it will be pruned.
      # It doesn't matter if grunt and/or grunt-cli is already there
      awk '{ if ( $0 ~ /"dependencies".*/ ) {
                 printf "%s\n    %s\n    %s\n    %s\n    %s\n    %s\n    %s\n", $0, "\"connect\": \"2.x.x\",", "\"express\": \"4.x.x\",", "\"resolve-path\": \"1.x.x\",", "\"serve-static\": \"1.x.x\",", "\"static-favicon\": \"2.x.x\",", "\"cachelicious\": \"cblage/node-cachelicious\",";
             } else {
                 print $0;
             }
           }' $build_dir/package.json > $build_dir/tmp-package.json;
      cp $build_dir/tmp-package.json $build_dir/package.json
      rm $build_dir/tmp-package.json
      cat $build_dir/package.json
    fi
  else
    if [[ $server_type == "node" || $server_type == "node.js" ]]; then
      status "Vendoring package.json for $server_type server into slug..."
      mv "$bp_dir/vendor/package-node.json" "$build_dir/package.json"
    elif [[ $server_type == "express" || $server_type == "express.js" ]]; then
      status "Vendoring package.json for $server_type server into slug..."
      mv "$bp_dir/vendor/package-express.json" "$build_dir/package.json"
    fi
  fi

  status "Installing Node and build dependencies..."
  node_buildpack_dir=$(mktemp -d -t node.XXXXXX)
  git clone --quiet https://github.com/heroku/heroku-buildpack-nodejs.git $node_buildpack_dir
  chmod -f +x $node_buildpack_dir/bin/{detect,compile,release} || true
  $node_buildpack_dir/bin/compile $build_dir $cache_dir/static
  rm -fr $node_buildpack_dir
  PATH=$build_dir/vendor/node/bin:$build_dir/bin:$build_dir/node_modules/.bin:$PATH

  if [[ $server_type == "node" || $server_type == "node.js" ]]; then
    if [ -f $build_dir/server.js ]; then
      status "Using existing server.js"
    else
      status "Vendoring server.js for $server_type server into slug..."
      mv "$bp_dir/vendor/server.js" "$build_dir/server.js"
    fi
  elif [[ $server_type == "express" || $server_type == "express.js" ]]; then
    if [ -f $build_dir/server.js ]; then
      status "Using existing server.js"
    else
      status "Vendoring server.js for $server_type server into slug..."
      mv "$bp_dir/vendor/express.js" "$build_dir/server.js"
    fi
  fi

  # If Procfile is absent, try to create one using `node server`
  if [ ! -e $build_dir/Procfile ]; then
    status "No Procfile found; Adding `node server` to new Procfile"
    echo "web: node server" > $build_dir/Procfile
  fi

elif [[ $server_type == "nginx" ]]; then

  # init default nginx configuration
  if [ -d "${build_dir}/conf" ]; then
    status "Using existing nginx configuration."
  else
    status "Vendoring default nginx configuration into slug... "
    mkdir -p "${build_dir}/conf"
    mv "$bp_dir/vendor/mime.types" "$build_dir/conf/mime.types"
    mv "$bp_dir/vendor/nginx.conf.erb" "$build_dir/conf/nginx.conf.erb"
  fi

  # Nginx Installation
  status "Initiating Nginx Buildpack... "
  nginx_buildpack_dir=$(mktemp -d -t nginx.XXXXXX)
  git clone --quiet https://github.com/abhishekmunie/heroku-buildpack-nginx.git $nginx_buildpack_dir
  chmod -f +x $nginx_buildpack_dir/bin/{detect,compile,release} || true
  $nginx_buildpack_dir/bin/compile $build_dir $cache_dir/static
  rm -fr $nginx_buildpack_dir

fi
