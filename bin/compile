#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

set -e            # fail fast
set -o pipefail   # don't ignore exit codes when piping output
# set -x          # enable debugging

# Configure directories
build_dir=$1
cache_dir=$2
env_dir=$3

bp_dir=$(cd $(dirname $0); cd ..; pwd)

# clean up leaking environment
unset GIT_DIR

# Load some convenience functions like status(), echo(), and indent()
source $bp_dir/bin/common.sh

source "$build_dir/_static.cfg"

if [ ! -e $build_dir/Procfile ]; then
  Generate_Procfile=true
fi

bp_dir=`cd $(dirname $0); cd ..; pwd`

if [[ ! -f $build_dir/error/404.html ]]; then
  if [[ -f $build_dir/404.htm ]]; then
    echo -n "-----> Movinging /404.htm to /error/404.html... "
    mv "$build_dir/404.htm" "$build_dir/error/404.html"
    echo "done"
  elif [[ -f $build_dir/404.html ]]; then
    echo -n "-----> Movinging /404.htm to /error/404.html... "
    mv "$build_dir/404.html" "$build_dir/error/404.html"
    echo "done"
  elif [[ -f $build_dir/error/404.htm ]]; then
    echo -n "-----> Renaming 404.htm to 404.html... "
    mv "$build_dir/error/404.htm" "$build_dir/error/404.html"
    echo "done"
  else
    echo -n "-----> Vendoring default 404.html into slug... "
    mv "$bp_dir/vendor/404.html" "$build_dir/404.html"
    echo "done"
  fi
fi

if [[ ! $SERVER_TYPE ]]; then
  SERVER_TYPE="node"
fi

if [[ $SERVER_TYPE == "node" || $SERVER_TYPE == "node.js" || $SERVER_TYPE == "express" || $SERVER_TYPE == "express.js" ]]; then

  if [[ $SERVER_TYPE == "node" || $SERVER_TYPE == "node.js" ]]; then

    if [ -f $build_dir/package.json ]; then
      status "Using existing package.json"
    else
      echo -n "-----> Vendoring package.json for $SERVER_TYPE server into slug... "
      mv "$bp_dir/vendor/package.json" "$build_dir/package.json"
      echo "done"
    fi

    if [ -f $build_dir/server.js ]; then
      status "Using existing server.js"
    else
      echo -n "-----> Vendoring server.js for $SERVER_TYPE server into slug... "
      mv "$bp_dir/vendor/server.js" "$build_dir/server.js"
      echo "done"
    fi

  elif [[ $SERVER_TYPE == "express" || $SERVER_TYPE == "express.js" ]]; then

    if [ -f $build_dir/package.json ]; then
      status "Using existing package.json"
    else
      echo -n "-----> Vendoring package.json for $SERVER_TYPE server into slug... "
      mv "$bp_dir/vendor/package-express.json" "$build_dir/package.json"
      echo "done"
    fi

    if [ -f $build_dir/server.js ]; then
      status "Using existing server.js"
    else
      echo -n "-----> Vendoring server.js for $SERVER_TYPE server into slug... "
      mv "$bp_dir/vendor/express.js" "$build_dir/server.js"
      echo "done"
    fi

  fi

  status "Installing Node and build dependencies..."
  NODE_BUILDPACK_DIR=$(mktemp -d -t node.XXXXXX)
  git clone --quiet https://github.com/heroku/heroku-buildpack-nodejs.git $NODE_BUILDPACK_DIR
  chmod -f +x $NODE_BUILDPACK_DIR/bin/{detect,compile,release} || true
  $NODE_BUILDPACK_DIR/bin/compile $build_dir $cache_dir
  rm -fr $NODE_BUILDPACK_DIR

elif [[ $SERVER_TYPE == "nginx" ]]; then

  # init default nginx configuration ----------

  if [ -d "${build_dir}/conf" ]; then
    status "Using existing nginx configuration."
  else
    echo -n "-----> Vendoring default nginx configuration into slug... "
    mkdir -p "${build_dir}/conf"
    mv "$bp_dir/vendor/mime.types" "$build_dir/conf/mime.types"
    mv "$bp_dir/vendor/nginx.conf.erb" "$build_dir/conf/nginx.conf.erb"
    echo "done"
  fi

  # Nginx -------------------------------------

  status "Initiating Nginx Buildpack... "
  NGINX_BUILDPACK_DIR=$(mktemp -d -t nginx.XXXXXX)
  git clone --quiet https://github.com/abhishekmunie/heroku-buildpack-nginx.git $NGINX_BUILDPACK_DIR
  chmod -f +x $NGINX_BUILDPACK_DIR/bin/{detect,compile,release} || true
  $NGINX_BUILDPACK_DIR/bin/compile $build_dir $cache_dir
  echo "       done."
  rm -fr $NGINX_BUILDPACK_DIR

fi
